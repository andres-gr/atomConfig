# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson
'body':
    'ctrl-tab ^ctrl': 'unset!'
    'ctrl-tab': 'pane:show-next-item'
    'ctrl-shift-tab ^ctrl': 'unset!'
    'ctrl-shift-tab': 'pane:show-previous-item'
'atom-text-editor':
    'cmd-f10': 'bookmarks:toggle-bookmark'
    'cmd-f12': 'bookmarks:jump-to-next-bookmark'
    'cmd-f11': 'bookmarks:jump-to-previous-bookmark'
    'cmd-shift-f10': 'bookmarks:clear-bookmarks'
    'shift-ctrl-c': 'code-format:format-code'
    'ctrl-shift-c': 'color-picker:open'
    'alt-shift-o': 'outline-view:toggle'
    'cmd-shift-c': 'unset!'
#'atom-text-editor[data-grammar~="jsx"]:not([mini])':
#  'tab': 'emmet:expand-abbreviation-with-tab'
'.platform-darwin atom-text-editor:not([mini])':
    'ctrl-cmd-/': 'block-comment-plus:toggle'
